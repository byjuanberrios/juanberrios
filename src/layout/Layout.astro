---
import { ClientRouter } from "astro:transitions";
import { Font } from "astro:assets";
import LoadingIndicator from "astro-loading-indicator/component";

import SEO from "../components/SEO.astro";

// @types
import type { SEOProps } from "../@types";

// Styles
import "@/styles/global.css";

// Shared Components
import Header from "../components/shared/Header/index.astro";
import Footer from "../components/shared/Footer.astro";

const { title, description, ogImage } = Astro.props as SEOProps;
---

<!doctype html>
<html lang="es" class="">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <SEO
      {...{
        title,
        description,
        ogImage,
      }}
    />
    <Font cssVariable="--font-interdisplay" preload />
    <Font cssVariable="--font-inter" preload />
    <Font cssVariable="--font-newsreader" preload />
    <ClientRouter />
    <LoadingIndicator color="transparent" height="2px" threshold={false} />
    <script is:inline>
      const prefersDarkScheme = window.matchMedia(
        "(prefers-color-scheme: dark)"
      );

      const applyTheme = (theme) => {
        document.documentElement.classList.toggle("dark", theme === "dark");
        localStorage.setItem("theme", theme);
        const themeToggleButton = document.querySelector(".theme-btn");
        if (themeToggleButton) {
          themeToggleButton.setAttribute("aria-label", theme);
        }
      };

      const getInitialTheme = () => {
        const storedTheme = localStorage.getItem("theme");
        if (storedTheme) {
          return storedTheme;
        }
        return prefersDarkScheme.matches ? "dark" : "light";
      };

      const handleThemeToggleClick = () => {
        const currentStoredTheme = localStorage.getItem("theme");
        const newTheme = currentStoredTheme === "light" ? "dark" : "light";
        applyTheme(newTheme);
      };

      const setupThemeToggleListener = () => {
        const themeToggleButton = document.querySelector(".theme-btn");
        if (themeToggleButton) {
          themeToggleButton.removeEventListener(
            "click",
            handleThemeToggleClick
          );
          themeToggleButton.addEventListener("click", handleThemeToggleClick);
        }
      };

      // Aplicar tema inicial inmediatamente
      applyTheme(getInitialTheme());

      // Configurar listener cuando el DOM estÃ© listo
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", setupThemeToggleListener);
      } else {
        setupThemeToggleListener();
      }

      // Escuchar cambios del sistema
      prefersDarkScheme.addEventListener("change", (event) => {
        applyTheme(event.matches ? "dark" : "light");
      });

      // Manejar View Transitions de Astro
      document.addEventListener("astro:after-swap", () => {
        applyTheme(
          localStorage.getItem("theme") ||
            (prefersDarkScheme.matches ? "dark" : "light")
        );
        setupThemeToggleListener();
      });
    </script>
  </head>
  <body
    class="bg-stone-100 dark:bg-neutral-900 text-zinc-900 dark:text-zinc-50"
  >
    <Header />
    <slot />
    <Footer />
  </body>
</html>
